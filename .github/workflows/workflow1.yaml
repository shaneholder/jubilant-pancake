run-name: First Workflow
on:
  workflow_call:
    inputs:
      working-dir:
        type: string
        required: true
      terraform-version:
        type: string
        required: true
        default: "1.7.3"
      environment:
        type: string
        required: true
      action:
        type: string
        required: true

permissions:
  id-token: write # write permission is required for az login

jobs:
  plan:
    if: ${{ inputs.action == 'plan' }}
    continue-on-error: false
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}-ro
    env:
      # Set environment variables for terraform init backend
      ARM_TENANT_ID: ${{vars.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true # Allows logging into Azure using Federated ID
      ARM_USE_AZUREAD: true # setting so that Storage Blob Data Owner can be used and listkeys action is not required
      WORKING_DIR: ${{inputs.working-dir}}
      TF_VAR_environment: ${{inputs.environment}}
 
    defaults:
      run:
        working-directory: ${{inputs.working-dir}}
    permissions:
      pull-requests: write # write permission in order to add comments for terraform output
      id-token: write # write permission is required for az login
    steps:
    - name: Azure login
      uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
       
    - uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3.1.1
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Load Backend Configuration
      # Allows the usage of envrionemnt variables
      run: cat ${{inputs.environment}}.conf >> ${GITHUB_ENV}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -diff
    
    - name: Terraform Init
      # To run init ensure that the client id has Storage Blob Data Owner
      # TODO: Minimal permissions required to work, I don't like that the -ro client needs rw access to state storage account
      # Can a different container be used
      id: init
      run: terraform init -backend-config=${{inputs.environment}}.conf -backend-config="storage_account_name=${{vars.STORAGE_ACCOUNT_NAME}}" -backend-config="resource_group_name=${{vars.RESOURCE_GROUP_NAME}}"
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=tfplan.out
      continue-on-error: true

    - name: Save Plan
      # Store the plan so it can be used in the apply
      uses: azure/cli@965c8d7571d2231a54e321ddd07f7b10317f34d9# v2.0.0
      if: success()
      with:
        inlineScript: |
          cd ${{ env.WORKING_DIR }}
          az storage blob upload --overwrite --auth-mode login -f  tfplan.out --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} --container-name plans --name ${{ github.event.number }}_${{inputs.environment}}.out

    - name: Create Job Summary file
      if: always()
      run: |
        cat <<EOF > summary.md
        #### Terraform Format and Style ${{inputs.environment}}üñå\`${{ steps.fmt.outcome }}\`
        <details><summary>Format Output</summary>

        \`\`\`
        ${{ steps.fmt.outputs.stdout }}
        \`\`\`

        </details>

        
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        <details><summary>Initialization Output</summary>

        \`\`\`
        ${{ steps.init.outputs.stdout }}
        \`\`\`

        </details>
        
        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        <details><summary>Validation Output</summary>

        \`\`\`
        ${{ steps.validate.outputs.stdout }}
        \`\`\`

        </details>
        
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        <details><summary>Show Plan</summary>

        \`\`\`
        ${{ steps.plan.outputs.stdout }}
        \`\`\`

        </details>

        EOF

    - name: Update Job Summary
      run: cat summary.md >> $GITHUB_STEP_SUMMARY

    - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs')
          const path = require('path')
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style ${{inputs.environment}}')
          })
    
          // 2. Prepare format of the comment
          const output = fs.readFileSync(path.join(process.env.WORKING_DIR, 'summary.md')).toString()

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  apply:
    if: ${{ inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      # Set environment variables for terraform init backend
      ARM_TENANT_ID: ${{vars.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true # setting so that Storage Blob Data Owner can be used and listkeys action is not required
      WORKING_DIR: ${{inputs.working-dir}}

    defaults:
      run:
        working-directory: ${{inputs.working-dir}}
    permissions:
      pull-requests: write # write permission in order to add comments for terraform output
      id-token: write # write permission is required for az login
    steps:
    - name: Azure login
      uses: azure/login@6c251865b4e6290e7b78be643ea2d005bc51f69a # v2.1.1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        
    - uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3.1.1
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Load Backend Configuration
      # Allows the usage of envrionemnt variables
      run: cat ${{inputs.environment}}.conf >> ${GITHUB_ENV}
    
    - name: Terraform Init
      # To run init ensure that the client id has Storage Blob Data Owner
      # TODO: Minimal permissions required to work, I don't like that the -ro client needs rw access to state storage account
      # Can a different container be used
      id: init
      run: terraform init -backend-config=${{inputs.environment}}.conf -backend-config="storage_account_name=${{vars.STORAGE_ACCOUNT_NAME}}" -backend-config="resource_group_name=${{vars.RESOURCE_GROUP_NAME}}"
    
    - name: Download Plan
      # Store the plan so it can be used in the apply
      uses: azure/cli@965c8d7571d2231a54e321ddd07f7b10317f34d9# v2.0.0
      with:
        inlineScript: |
          cd ${{ env.WORKING_DIR }}
          az storage blob download --auth-mode login -f ${{ github.event.number }}.out --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} --container-name plans --name ${{ github.event.number }}_${{inputs.environment}}.out
      
    - name: Terraform Apply
      id: apply
      run: terraform apply ${{ github.event.number }}.out
    
        