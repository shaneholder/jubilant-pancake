name: _ workflow call terraform plan
on:
  workflow_call:
    inputs:
      working-dir:
        type: string
        required: true
      terraform-version:
        type: string
        required: true
        default: "1.7.3"
      environment:
        type: string
        required: true
      saveplan:
        type: boolean
        required: true
      planName:
        type: string
        required: false
    outputs:
      plan-exitcode:
        description: "The plan exit code 2 means run apply, 0 means no changes, 1 means error"
        value: ${{jobs.plan.outputs.plan-exitcode}}

permissions:
  id-token: write # write permission is required for az login

jobs:

  plan:
    continue-on-error: false
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}-ro  # this allows targeting of a different credential when accessing environments so that plan uses different cred than apply
    env:
      # Set environment variables for terraform init backend
      ARM_TENANT_ID: ${{vars.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true # Allows logging into Azure using Federated ID
      ARM_USE_AZUREAD: true # setting so that Storage Blob Data Owner can be used and listkeys action is not required
      WORKING_DIR: ${{inputs.working-dir}}
      TF_VAR_environment: ${{inputs.environment}}
       # Depending on variables used in terraform add more variables here
      # eg: TF_VAR_AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    defaults:
      run:
        working-directory: ${{inputs.working-dir}}
    permissions:
      pull-requests: write # write permission in order to add comments for terraform output
      id-token: write # write permission is required for az login
    outputs:
      plan-exitcode: ${{steps.plan.outputs.exitcode}}
    steps:
    - name: Azure login
      uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
       
    - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Load Backend Configuration
      # Allows the usage of envrionemnt variables
      run: cat backends/${{inputs.environment}}.tfbackend >> ${GITHUB_ENV}

    - name: Terraform Init
      # To run init ensure that the client id has Storage Blob Data Owner
      # TODO: Minimal permissions required to work, I don't like that the -ro client needs rw access to state storage account
      # Can a different container be used
      id: init
      run: terraform init -no-color -backend-config=backends/${{inputs.environment}}.tfbackend -backend-config="storage_account_name=${{vars.STORAGE_ACCOUNT_NAME}}" -backend-config="resource_group_name=${{vars.RESOURCE_GROUP_NAME}}"
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -detailed-exitcode -no-color -out=tfplan.out
      continue-on-error: true

    - name: Save Plan
      # Store the plan so it can be used in the apply
      uses: azure/cli@089eac9d8cc39f5d003e94f8b65efc51076c9cbd # v2.1.0
      if: success() && inputs.saveplan && steps.plan.outputs.exitcode == 2
      with:
        inlineScript: |
          cd ${{ env.WORKING_DIR }}
          az storage blob upload --overwrite --auth-mode login -f  tfplan.out --account-name ${{ vars.STORAGE_ACCOUNT_NAME }} --container-name plans --name ${{inputs.planName}}

    - name: Create Job Summary file
      if: steps.plan.outputs.exitcode == 2
      run: |
        cat <<'EOF' > summary.md
        ### Terraform Results ${{ inputs.environment }}
        
        #### Terraform Initialization ‚öôÔ∏è${{ steps.init.outcome }} ${{ inputs.environment }}
        <details><summary>Initialization Output</summary>

        ```
        ${{ steps.init.outputs.stdout }}
        ```

        </details>
        
        #### Terraform Plan üìñ${{ steps.plan.outcome }} ${{ inputs.environment }}
        <details><summary>Show Plan</summary>

        ```
        ${{ steps.plan.outputs.stdout }}
        ```

        </details>

        EOF

    - name: Update Job Summary
      run: |
        if [[ "${{steps.plan.outputs.exitcode}}" == "2" ]]; then
          cat summary.md >> $GITHUB_STEP_SUMMARY
        elif [[ "${{steps.plan.outputs.exitcode}}" == "0" ]]; then
          echo "### Terraform Results ${{ inputs.working-dir }} ${{ inputs.environment }} No Changes" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Terraform Results ${{ inputs.working-dir }} ${{ inputs.environment }} ERROR" >> $GITHUB_STEP_SUMMARY
        fi
        

    - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == 2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs')
          const path = require('path')
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Results ${{ inputs.working-dir }} ${{ inputs.environment }}')
          })
    
          // 2. Prepare format of the comment
          const output = fs.readFileSync(path.join(process.env.WORKING_DIR, 'summary.md')).toString()

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
